// Fixed simulation method - backup
private async simulateRealTimeData() {
  if (this.intervalId) {
    clearInterval(this.intervalId);
  }

  this.intervalId = setInterval(async () => {
    // Only generate data if connection is active
    if (!this.isActive) {
      return;
    }

    // Get current user mode from localStorage
    const userData = localStorage.getItem('energySageUser');
    const userMode = userData ? JSON.parse(userData).mode : 'household';

    let mockData: EnergyReading;

    // Check if we have imported/uploaded data to base simulation on
    if (uploadedData.length > 0) {
      // Use imported data patterns for realistic simulation
      const randomReading = uploadedData[Math.floor(Math.random() * uploadedData.length)];
      
      // Add realistic variations to the imported data (¬±15%)
      const variation = 0.85 + Math.random() * 0.3; // 15% variation
      const simulatedKwh = randomReading.kwh * variation;
      
      mockData = {
        timestamp: new Date().toISOString(),
        device: randomReading.device,
        kwh: Math.round(simulatedKwh * 1000) / 1000,
        machine_id: randomReading.machine_id,
        process_id: randomReading.process_id
      };
      
      console.log(`üìä Simulating from imported data: ${mockData.device}, ${mockData.kwh.toFixed(3)} kWh`);
    } else {
      // Load sample data for simulation if no uploads available
      console.log('üìã Loading sample data for simulation...');
      const sampleData = await loadSampleDataForSimulation(userMode);
      
      if (sampleData.length > 0) {
        // Use sample data patterns for simulation
        const randomReading = sampleData[Math.floor(Math.random() * sampleData.length)];
        
        // Add realistic variations to the sample data (¬±20%)
        const variation = 0.8 + Math.random() * 0.4; // 20% variation
        const simulatedKwh = randomReading.kwh * variation;
        
        mockData = {
          timestamp: new Date().toISOString(),
          device: randomReading.device,
          kwh: Math.round(simulatedKwh * 1000) / 1000,
          machine_id: randomReading.machine_id,
          process_id: randomReading.process_id
        };
        
        console.log(`üìä Simulating from sample data: ${mockData.device}, ${mockData.kwh.toFixed(3)} kWh`);
      } else if (userMode === 'industry') {
        // Fallback: Industry mode synthetic data
        const industrialDevices = [
          { name: 'Production Line A', base: 85, machine_id: 'PL_A_001', process: 'manufacturing', variance: 0.15 },
          { name: 'Production Line B', base: 82, machine_id: 'PL_B_002', process: 'manufacturing', variance: 0.12 }
        ];
        
        const selectedDevice = industrialDevices[Math.floor(Math.random() * industrialDevices.length)];
        const hour = new Date().getHours();
        let loadFactor = hour >= 6 && hour <= 18 ? 1.0 : 0.4;
        const consumption = selectedDevice.base * loadFactor * (1 + (Math.random() - 0.5) * selectedDevice.variance);
        
        mockData = {
          timestamp: new Date().toISOString(),
          device: selectedDevice.name,
          kwh: Math.round(consumption * 100) / 100,
          machine_id: selectedDevice.machine_id,
          process_id: selectedDevice.process
        };
      } else if (importedAppliances.length > 0) {
        // Use imported appliances for household simulation
        const randomAppliance = importedAppliances[Math.floor(Math.random() * importedAppliances.length)];
        const hour = new Date().getHours();
        let usageFactor = this.calculateApplianceUsageFactor(randomAppliance, hour);
        const baseConsumption = (randomAppliance.rated_power || 100) / 1000;
        const simulatedKwh = baseConsumption * usageFactor;
        
        mockData = {
          timestamp: new Date().toISOString(),
          device: randomAppliance.name,
          kwh: Math.round(simulatedKwh * 1000) / 1000
        };
        
        console.log(`üìä Simulating from imported appliance: ${mockData.device}, ${mockData.kwh.toFixed(3)} kWh`);
      } else {
        // Ultimate fallback
        const householdDevices = ['Living Room AC', 'Bedroom AC', 'Refrigerator', 'Water Heater'];
        const randomDevice = householdDevices[Math.floor(Math.random() * householdDevices.length)];
        let baseConsumption = randomDevice.includes('AC') ? 2.5 : 1.0;
        
        mockData = {
          timestamp: new Date().toISOString(),
          device: randomDevice,
          kwh: baseConsumption * (0.7 + Math.random() * 0.6)
        };
        
        console.log(`üìä Fallback synthetic data: ${mockData.device}, ${mockData.kwh.toFixed(3)} kWh`);
      }
    }
    
    this.callbacks.forEach(callback => callback(mockData));
  }, 2000);
  
  console.log('‚ñ∂Ô∏è Real-time simulation started using your data patterns');
}